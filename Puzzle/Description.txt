Архитектура прототипа:
- Игрок выбирает уровень;
- На овнове его выбора создается поле с элементами;
- Загружается информация из PlayerPrefs о текущем прогрессе для уровня;
- На основе загруженной информации, если элемент активен, то для него создается UI элемент в нижней панели;
- Реализация drag and drop через IPointerDownHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IDropHandler;
- Вся информация сохраняется в JSON, структуры: {AllLevels:[{idLevel, levelElements:[{isActive, idElement}, ...]}, ...}];

Описание классов (скриптов):
- MainUI	(скрипт для логики основного меню);
- GameManager	(сингл скрипт игровой логики);
- SaveLoadData	(сингл скрипт для загрузки/сохранения/ресета данных);
- AllElements	(скрипт для элементов на сцене, нужен для их перебора, проверки победы, инициализации);
- Element	(скрипт элементов в панель игры);
- ElementUI	(скрипт элементов в нижней панели).

Доработки:
Используя абстрактный класс и наследование, вынес бы в него часть кода из классов Element и ElementUI, т.к. частично у них схожая реализация.
Доработал бы систему Save/Load, сделал бы немного гибкой.
Возможно, используя Editor реализовал бы простую систему создания уровней.

Фактически затраченное время ~6 часов.
Из них:
- 1 час на продумывание основной логики (что, как и где будет работать);
- 1.5-2 часа на создание и тестирование системы Save/Load;
- остальное время на drag and drop, UI и все остальное.
